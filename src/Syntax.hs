{-# LANGUAGE DeriveFunctor #-}
{-|

Module      : Syntax
Description : Abstract syntax for Jeopardy.
Author      : Joachim Tilsted Kristensen.
Licence     : GNU GENERAL PUBLIC LICENSE
Maintainer  : joachkr@ifi.uio.no
Stability   : experimental
Portability : POSIX

The current syntax of the invertible programming language suggested in the
article, `Jeopardy : an invertible programming language`, submitted to the
`37th symposium on implementation of functional languages` in Copenhagen 2022.

-}

module Syntax where

-- * Abbreviations.

type Name = String
type X    = Name   -- Variable names.
type F    = Name   -- Function symbols.
type C    = Name   -- Data constructor names.
type T    = Name   -- Data type names

-- * Language definition.
--
--   Note that everything is parameterized with a variable `p`, that will be
--   populated by various properties about each construct (source code
--   position, inferred type, etc..).
--
--   This has two main purposes:
--   1) To hold term specific information generated by program analysis.
--   2) To store information for throwing proper error messages.

